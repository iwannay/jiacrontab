#!/bin/bash
# -----------------------------------------------------------------
# The initial version was released by Vipkwd
# -----------------------------------------------------------------
# 应用场景：本脚本需配合jiacrontab v2.2.0+ 版本使用
# （https://jiacrontab.iwannay.cn/download/jiacrontab-v2.2.0-linux-amd64.zip）
#
# 部署方法：1、解压上述zip二进制包; 2、将本脚本放入解压后的目录终呈如下结构
#
# [root@vipkwd jiacrontab]# la
# 总用量 20K
# 1033994 drwxr-xr-x  4 root www  4.0K 8月  12 20:09 .
# 1024002 drwxr-xr-x 24 root www  4.0K 8月  12 20:09 ..
# 1034047 drwxr-xr-x  3 root www  4.0K 8月  11 08:27 jiacrontab_admin
# 1033995 drwxr-xr-x  4 root www  4.0K 8月  11 14:24 jiacrontabd
# 1034863 -rwxr-xr-x  1 root root 3.6K 8月  11 13:13 service
# -----------------------------------------------------------------


# -----配置项 start-----
# 提供进程搜索关键字（即:  "jiacrontab_admin"与“jiacrontab_admin” 在公共关键字部分，用于shell grep 过滤）
APP_KEYWORDS=jiacrontab

# 提供web前端服务的脚本文件(目录)名（对应: ./jiacrontab_admin/jiacrontab_admin)
ADMIN_SCRIPT_NAME=jiacrontab_admin

# 任务调度服务脚本文件(目录)名（对应: ./jiacrontabd/jiacrontabd)
BD_SCRIPT_NAME=jiacrontabd
# -----配置项 end-----



# 绝对定位当前目录
PROJECT_ROOT=`pwd`
ADMIN_FLAG=0
BD_FLAG=0
FORMATER_LINE="------------------------------------------------------------------------------------------------------"
STIME_LOGFILE=".stime.log"
function start(){
    for cli in `ps -ef | grep "$APP_KEYWORDS" | grep -v grep | awk -F '/' '{print $3}'`
    do 
        if [ "${cli}"  == "${ADMIN_SCRIPT_NAME}" ];then
            ADMIN_FLAG=1
        fi
        if [ "${cli}"  == "${BD_SCRIPT_NAME}" ];then
            BD_FLAG=1
        fi
    done

    if [ "${ADMIN_FLAG}"  == "0" ];then
        cd ${PROJECT_ROOT}/${ADMIN_SCRIPT_NAME}
        nohup ./${ADMIN_SCRIPT_NAME} &> ${ADMIN_SCRIPT_NAME}.log &
        #sleep 1;
        echo "${ADMIN_SCRIPT_NAME}[ StartTime: `date --date='0 days ago' \"+%Y-%m-%d %H:%M:%S\"` ]" >> ${PROJECT_ROOT}/${STIME_LOGFILE}
        echo -e " -- \033[33m${ADMIN_SCRIPT_NAME}\033[0m (\033[32mStarted\033[0m)"
    else
        echo -e " -- \033[33m${ADMIN_SCRIPT_NAME}\033[0m is running (\033[33mSkiped\033[0m)"
    fi

    if [ "${BD_FLAG}"  == "0" ];then
        cd ${PROJECT_ROOT}/${BD_SCRIPT_NAME}
        nohup ./${BD_SCRIPT_NAME} &> ${BD_SCRIPT_NAME}.log &
        #sleep 1;
        echo "${BD_SCRIPT_NAME}[ StartTime: `date --date='0 days ago' \"+%Y-%m-%d %H:%M:%S\"` ]" >> ${PROJECT_ROOT}/${STIME_LOGFILE}
        echo -e " -- \033[33m${BD_SCRIPT_NAME}\033[0m (\033[32mStarted\033[0m)"
    else
        echo -e " -- \033[33m${BD_SCRIPT_NAME}\033[0m is running (\033[33mSkiped\033[0m)"
    fi
}

function stop(){
    for line in `ps -ef | grep "$APP_KEYWORDS" | grep -v grep | awk -F ' ' '{print $2 " " $8}'`
    do
        STR=`echo $line | awk '{print $1}'`
        if [ $STR -gt 0 ] 2> /dev/null ;then
            kill -9 $STR;
        else
            echo -e " -- \033[33m${STR}\033[0m  (\033[34mStoped\033[0m) "
            #sleep 1;
        fi
    done
}

function parseDuringTime(){
    parseTimeResultStr=""
    logfile="${PROJECT_ROOT}/${STIME_LOGFILE}"
    if [ -f $logfile ];then
        stime=`grep "${1}\[ StartTime:" ${logfile} | tail -1 | awk '{print $3 " "$4}'`
        nowtime=`date --date='0 days ago' "+%Y-%m-%d %H:%M:%S"`
        time1=$(($(date +%s -d "$nowtime") - $(date +%s -d "$stime")));
        array=("Duration: ")
        config=(31579200 "Year" 2635200 "Month" 86400 "Day" 3600 "Hour" 60 "Minute" 1 "Second")
        j=0
        for str in ${config[*]}; do
            if [ $(($j%2)) -eq 0 ];then
                if [ ${time1} -ge ${config[$j]} ];then
                    j1=$(($j+1))
                    j2=$(($j+2))
                    array[$j1]=$[ $time1 / ${config[$j]} ]
                    array[$j2]=${config[$j1]}
                    if [ ${array[$j1]} -gt 1 ];then
                        array[$j2]="${array[$j2]}s"
                    fi
                    time1=$(($time1 % ${config[$j]}))
                fi
            fi
            j=$(($j+1))
        done
        if [ "Null" == "${stime}Null" ];then
            return 0
        fi
        parseTimeResultStr="${stime} (${array[*]})"
        return 1
    fi
    parseTimeResultStr=""
    return 0
}

function status(){
    if [ `ps -ef | grep "$APP_KEYWORDS" | grep -v grep | wc -l` -gt 0 ];then
        echo $FORMATER_LINE
        echo " -- "
        parseDuringTime "${ADMIN_SCRIPT_NAME}"
        if [ $? -gt 0 ] 2> /dev/null;then
            # 全局获取函数返回的字符串
            echo -e " -- \033[33m${ADMIN_SCRIPT_NAME}\033[0m \033[32mactive (running)\033[0m since ${parseTimeResultStr}"
            #sleep 1
	else
            echo -e " -- \033[33m${ADMIN_SCRIPT_NAME}\033[0m \033[32mactive (running)\033[0m since Unknow"
        fi

        parseDuringTime "${BD_SCRIPT_NAME}"
        if [ $? -gt 0 ] 2> /dev/null;then
            # 全局获取函数返回的字符串
            echo -e " -- \033[33m${BD_SCRIPT_NAME}\033[0m \033[32mactive (running)\033[0m since ${parseTimeResultStr}"
            #sleep 1
	else
            echo -e " -- \033[33m${BD_SCRIPT_NAME}\033[0m \033[32mactive (running)\033[0m since Unknow"
        fi
        echo " -- "
        echo $FORMATER_LINE
        ps -ef | grep "$APP_KEYWORDS" | grep -v grep
        echo $FORMATER_LINE
        netstat -tlpan | grep "$APP_KEYWORDS" | grep -v grep
    else
       echo -e " -- \033[33m${ADMIN_SCRIPT_NAME}\033[0m is \033[31moffline\033[0m"
       echo -e " -- \033[33m${BD_SCRIPT_NAME}\033[0m is \033[31moffline\033[0m"
    fi
}

function help() {
    echo $FORMATER_LINE
    #echo " "
    echo " Jiacrontab 简单可信赖的任务管理工具(V2.2.0)"
    echo "   1.自定义job执行"
    echo "   2.允许设置job的最大并发数"
    echo "   3.每个脚本都可在web界面下灵活配置，如测试脚本运行，查看日志，强杀进程，停止定时..."
    echo "   4.允许添加脚本依赖（支持跨服务器），依赖脚本提供同步和异步的执行模式"
    echo "   5.支持异常通知"
    echo "   6.支持守护脚本进程"
    echo "   7.支持节点分组"
    echo "   n.更多请访问仓库查看"
    #echo " "
    echo $FORMATER_LINE
    #echo " "
    echo " Github: https://github.com/iwannay/jiacrontab"
    echo " Csdn: https://codechina.csdn.net/mirrors/iwannay/jiacrontab"
    echo " "
    echo " Package: https://jiacrontab.iwannay.cn/download/"
    #echo " "
    echo $FORMATER_LINE
    echo "input: $0 OPTION" >&2  
    echo "   OPTION :"  
    echo "          start"  
    echo "          stop"  
    echo "          status"  
    echo "          restart"  
}
COMMAND=$1
shift 1  
case $COMMAND in  
    start)
        start;
    ;;

    stop)
        stop;
    ;;
    
    status)
        status;
    ;;

    restart)
        stop;
        sleep 1
        start;
        sleep 1
        status;
    ;;

    *)  
        help;  
        exit 1;  
        ;;  
esac
